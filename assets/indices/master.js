window.CURRENT_INDICES=[{"title":"静态资源","link":"assets","nodes":[{"h2":"","h3":"","h4":"","name":"","content":"resources/dcat-page/应用名称/public目录可以被直接访问，如果你有需要增加的静态资源请放入这个目录。"}]},{"title":"更新日志","link":"change-log","nodes":[]},{"title":"评论系统","link":"comment","nodes":[{"h2":"","h3":"","h4":"","name":"","content":"Gitalk是一个基于Github Issue的评论插件，开发者无需自己的服务器即可让自己的网站拥有评论系统，非常好用。 Dcat Page集成了Gitalk评论系统，用户可以通过配置文件控制是否使用该评论系统。"},{"h2":"","h3":"注册Github账号","h4":"","name":"注册Github账号-h3","content":"Gitalk的评论功能是基于Github Issue实现的，所以必须要注册一个Github账号才能使用，Github账号只需要有邮箱就能注册，非常简单，这里就不赘述了。   需要注意的是，给评论系统用的github账号尽量使用新注册的账号，不要使用常用账号！！！因为在使用Gitalk的过程中会暴露clientID和clientSecret，有一定的安全性问题。 "},{"h2":"","h3":"创建GitHub Application","h4":"","name":"创建GitHubApplication-h3","content":"注册完Github账号之后进入这个链接https://github.com/settings/applications/new创建GitHub Application。  创建完之后就可以看到Client ID和Client Secret两个参数"},{"h2":"","h3":"创建Github仓库","h4":"","name":"创建Github仓库-h3","content":"上述步骤完成之后就可以创建一个仓库来存储评论了，这一步非常简单，创建一个空的公仓即可，这里就不赘述了。"},{"h2":"","h3":"启用评论系统","h4":"","name":"启用评论系统-h3","content":"在应用目录({root}/resources/dcat-page/{应用目录})打开配置文件config.php，加上如下配置  return [ ... 'comment' => [ 'enable' => true, // 开启评论系统 'clientID' => 'f50cc212f807789bxxxx', // github application client_id 'clientSecret' => '6f39dccb1a24b057f0915d49b841e4b09a39xxxx', // github application client_secret 'repo' => 'xxx', // github仓库名称 'owner' => 'jqhwx', // github仓库所有者，可以是个人或者组织。 'admin' => ['jqhwx'], // github仓库的所有者和合作者 (对这个 repository 有写权限的用户)。 'language' => 'zh-CN', // 支持 [en, zh-CN, zh-TW]。 'perPage' => 15, // 每次加载的数据大小，最多 100。 'pagerDirection' => 'first', // 评论排序方式， last为按评论创建时间倒叙，first为按创建时间正序。 ... // 支持更多gitalk配置参数，请参考https://github.com/gitalk/gitalk ], ];  然后刷新页面就能看到评论系统了"},{"h2":"","h3":"创建Github Issue","h4":"","name":"创建GithubIssue-h3","content":"评论系统启用成功之后，第一次需要手动为每个页面创建一条Github Issue，然后你的网站用户才可以在上面进行自由评论。  创建的过程也非常简单，只需要用该Github仓库的所属账号进行授权登录，然后每个页面都点击进去一次即可。   记住第一次进入一个页面不要连续刷新，只需要点进去一次就行，否则可能会创建好几条一模一样的Issue。   Issue创建成功后，用户看到的页面如下"}]},{"title":"编译和发布","link":"compile","nodes":[{"h2":"","h3":"编译","h4":"","name":"编译-h3","content":"如果你的应用已经开发完成，就可以通过npm run prod命令打包前端资源，然后运行以下命令进行编译（编译命令已在内部自动运行生成索引命令，无需单独运行）：   编译之前必须先运行npm run prod打包你的前端文件，否则编译后你会发现修改的前端代码没有生效！   # 应用名称留空会编译所有应用 # 目录名称可留空 php artisan dcatpage:compile {应用名称} --dir={目录名称}  编译完成后的文件会输出到resource/dcat-page/应用目录/_dist_目录下，其中index.html是入口文件，可以用浏览器打开访问。  编译完成后的文件大概如下： "},{"h2":"","h3":"发布","h4":"","name":"发布-h3","content":"把你编译完成的文件放在WEB服务器可访问的任意目录即可。  比如服务器中WEB可访问目录为：/home/www/default，那么你可以把你的文件放在根目录，也可以放在根目录下的任意一个目录。"}]},{"title":"配置参数","link":"config","nodes":[{"h2":"","h3":"","h4":"","name":"","content":"<?php return [ // 应用的作者和邮箱，可以不填 'authors' => [ [ 'name' => 'Your name', 'email' => 'Your email' ] ], // 应用主页，可以不填 'homepage' => '', // 应用描述，可以不填 'description' => 'Description...', // 网站SEO配置 'website' => [ 'title' => 'Dcat Page', 'keywords' => '', 'description' => '', ], // 文档相关配置 'doc' => [ // 默认打开的文档 'default' => 'installation', // 导航索引文档 'index' => 'documentation', // 默认打开的版本 'version'=> 'master', // 忽略的文档 'ignore' => [], ], ]; "}]},{"title":"创建应用","link":"create","nodes":[{"h2":"创建","h3":"","h4":"","name":"创建-h2","content":"Dcat Page允许创建多个应用，创建应用非常简单，运行：   应用名称请尽量使用英文。   php artisan dcatpage:create app-name  然后打开浏览器访问：http://yourhost/dcat-page/app-name，即可实时预览你的应用。"},{"h2":"应用目录结构","h3":"","h4":"","name":"应用目录结构-h2","content":"创建完命令后，会在resource/dcat-page/app-name目录生成如下结构文件：  ├── package.json ├── webpack.mix.js ├── config.php ├── .gitignore ├── assets │ ├── js │ │ ├── ... │ │ └── laravel.js │   └── sass │ │ ├── ... │ │ └── laravel.scss ├── public │ └── assets │ └── ... ├── views │   ├── pages │ │ ├── docs.blade.php │ │ └── index.blade.php │ ├── partials │   │ └── ... │ └── app.blade.php └── docs    └── master ├── documentation.md    └── installation.md   文件结构说明：   package.json npm配置文件，一般无需修改 webpack.mix.js Laravel Mix 配置文件，无需修改 config.php 应用配置文件，里面只有非常简单的几个参数，请参考配置参数 assets 前端Laravel Mix打包前文件目录 js/laravel.js 应用的js入口文件，如需要定制前端内容可以修改 sacss/laravel.scss 应用的sacss入口文件，如需要定制前端内容可以修改 public 静态资源目录，这个目录下的文件都可以直接访问 assets 默认的静态资源目录，里面包含项目的图片以及Laravel Mix打包后输出的文件 views Blade视图文件目录，详细请参考页面和视图 pages 入口页面目录，支持多层级结构，一个文件为一个页面 index.blade.php 默认入口页面文件 doc.blade.php 文档入口页面文件 app.blade.php 公共模板文件 docs Markdown文档目录，一个版本一个目录，默认版本目录为master master/documentation.md 文档导航目录文件，如需改为其他文档，可在config.php中配置 master/installation.md 默认显示文档，如需改为其他文档，可在config.php中配置 "}]},{"title":"前端","link":"dev","nodes":[{"h2":"","h3":"","h4":"","name":"","content":"Dcat Admin通过Laravel Mix管理前端资源，如果你从没有接触过Laravel Mix和webpack都没有关系，因为Laravel Mix真的太太太太简单了，你甚至都不用管Laravel Mix和webpack是啥都能快速上手！"},{"h2":"","h3":"安装前端依赖","h4":"","name":"安装前端依赖-h3","content":"首先请确保你的电脑安装了npm，安装完成之后在Laravel项目根目录运行以下命令：  cd resources/dcat-page/应用目录 npm install"},{"h2":"","h3":"开始开发","h4":"","name":"开始开发-h3","content":"安装完依赖之后，运行以下命令可以打包你的js和scss文件，并自动输出到public目录。  npm run dev  试着在你的resources/dcat-page/应用名称/assets/js/laravel.js中加上一行代码：console.log('Dcat Page')。 然后运行打包命令npm run dev，打包完成之后刷新浏览器即可看到效果。  看到这里相信你已经掌握了Laravel Mix的基本使用方法了。"},{"h2":"","h3":"开始开发","h4":"watch","name":"watch-h4","content":"每次修改了文件都要运行npm run dev打包文件才能看到效果非常麻烦，所以开发时推荐通过运行npm run watch命令监听前端文件状态，一旦文件内容有变化会自动打包。"},{"h2":"","h3":"发布","h4":"","name":"发布-h3","content":"通过npm run dev命令打包的文件是是没有压缩过的，如果你的应用已经开发完成要发布到生产环境，建议通过npm run prod命令打包你的文件。"},{"h2":"","h3":"文件说明","h4":"package.json","name":"package.json-h4","content":"这个是npm配置文件，里面有一些脚本命令配置和依赖配置，一般无需修改。"},{"h2":"","h3":"文件说明","h4":"webpack.mix.js","name":"webpack.mix.js-h4","content":"这个是Laravel Mix配置文件，里面的指定了需要打包的js和scss入口文件，以及打包输出目录，一般无需修改。"},{"h2":"","h3":"文件说明","h4":"assets/js/laravel.js","name":"assetsjslaravel.js-h4","content":"这是前端js的入口文件，在这个文件引入你的js代码即可。"},{"h2":"","h3":"文件说明","h4":"assets/sass/laravel.scss","name":"assetssasslaravel.scss-h4","content":"这是前端scss的入口文件，在这个文件引入你的css代码即可。"}]},{"title":"使用码云pages部署个人站点","link":"gitee","nodes":[{"h2":"","h3":"","h4":"","name":"","content":"码云pages提供免费部署在线静态站点的服务，在国内的访问速度比较快，并且使用也非常简单，下面将告诉大家如何使用码云pages部署自己的静态站点。"},{"h2":"","h3":"","h4":"1.编译","name":"1.编译-h4","content":"首先需要把静态文件编译好，具体流程请参考编译和发布章节。"},{"h2":"","h3":"","h4":"2.注册码云账号并创建仓库","name":"2.注册码云账号并创建仓库-h4","content":"注册完账号之后进入首页点击左下角的“+”号（如图所示）进入仓库创建页面，然后输入仓库名称和路径然后点创建按钮即可，其他的表单可以忽略。   此处填写的仓库路径名也将会是部署完成之后的站点路径名。比如下图中的路径名是test，则部署完之后的访问路径为https://xxx.gitee.io/test。 "},{"h2":"","h3":"","h4":"3.上传文件","name":"3.上传文件-h4","content":"仓库创建好之后需要把一开始编译好的HTML上传到这个仓库，具体的上传流程这里就不赘述了（这里需要使用git上传，没有使用过的小伙伴推荐学习廖雪峰的教程）。  你可以把你的文件上传到任意目录，在下面的示例中则是把文件上传到pages目录"},{"h2":"","h3":"","h4":"4.部署上线","name":"4.部署上线-h4","content":"上传好文件之后在仓库页面找到服务标签，点击选择Gitee Pages进入部署站点页面，然后选择master分支，目录填上pages，最后点击部署按钮即可。  到这里你的个人站点就已经部署完成了，点击右上角的链接访问一下试试吧！"}]},{"title":"安装","link":"installation","nodes":[{"h2":"环境","h3":"","h4":"","name":"环境-h2","content":" PHP >= 7.1 Laravel >= 5.5.0 "},{"h2":"开始安装","h3":"","h4":"","name":"开始安装-h2","content":"请先确保已经安装好了Laravel，然后运行：  composer require dcat/page  安装部分到这里就完成了，无需再执行任何命令，也无需修改任何配置，就是这么简单。 下面开始创建你的应用吧。"}]},{"title":"文档","link":"markdown","nodes":[{"h2":"","h3":"放置目录","h4":"","name":"放置目录-h3","content":"把你的Markdown文档放在resources/dcat-page/应用名称/docs/版本号目录下即可自动编译成HTML文件。   所有Markdown文件请以小写字母 + \"-\"风格命名，不要使用大写字母，否则编译后有可能无法跳转。 "},{"h2":"","h3":"配置默认显示的版本","h4":"","name":"配置默认显示的版本-h3","content":"通过配置此参数可以控制访问时默认打开的文档的版本。  默认的版本号是marster，如果需要调整请修改resources/dcat-page/应用名称/config.php中doc.version参数：  return [ ... 'doc' => [ // 默认打开的版本 'version' => 'master', ... ], ];"},{"h2":"","h3":"配置默认显示的文档","h4":"","name":"配置默认显示的文档-h3","content":"通过此参数可以控制访问时默认打开的文档。  默认的显示的文档是installation.md，如果需要调整请修改resources/dcat-page/应用名称/config.php中doc.default参数：  return [ ... 'doc' => [ // 默认打开的文档 'default' => 'installation', ], ];"},{"h2":"","h3":"导航菜单","h4":"左侧菜单","name":"左侧菜单-h4","content":"文档页面的左边导航菜单默认是通过documentation.md配置生成，如果需要调整请修改resources/dcat-page/应用名称/config.php中doc.default参数：  return [ ... 'doc' => [ // 导航索引文档 'index' => 'documentation', ], ];  documentation.md内容格式如下：   注意，引入其他文档只需写上文件名称即可，不要加其他字符，如：[概述](overview.md)。   - ## 开始 - ## 构建 - ## [主题](theme.md) - ## [常见问题](qa.md) - ## [更新日志](change-log.md)"},{"h2":"","h3":"导航菜单","h4":"右侧导航栏","name":"右侧导航栏-h4","content":"右侧导航栏是自动生成的，无需任何配置，效果可参考本文档。"},{"h2":"","h3":"引入本地图片","h4":"","name":"引入本地图片-h3","content":"如果需要在文档中引入本地图片，需要把图片放在resources/dcat-page/应用名称/public目录下，然后引入时加上&#123;&#123;public}}前缀，如。  ### 引入图片示例 ![](&#123;&#123;public}}/assets/img/search_icon.png)  同时也支持HTML写法  <a href=\"&#123;&#123;public}}/assets/img/search_icon.png\" target=\"_blank\"> <img width=\"100%\" src=\"&#123;&#123;public}}/assets/img/search_icon.png\"> </a>"},{"h2":"","h3":"文档搜索","h4":"","name":"文档搜索-h3","content":"Dcat Page支持文档本地搜索，所有放在resources/dcat-page/应用名称/docs目录下的Markdown文件内容都可以被搜索。  运行以下命令可以生成索引（当你的文档内容有变化时需要重新生成索引）：   如果配置了忽略的文档生成索引时也会被忽略。   # 应用名称可留空，留空则会生成所有应用的文档索引 php artisan dcatpage:index {应用名称}"},{"h2":"","h3":"配置忽略的文档","h4":"","name":"配置忽略的文档-h3","content":"假如你的文档目录下有一部分文档不需要被编译成HTML，则可以通过doc.ignore参数配置：   README.md和LICENSE.md两个文件是系统默认忽略的，无法取消。   return [ ... 'doc' => [ // 忽略test1和test2两个文档 'ignore' => [ 'test1', 'test2' ], ], ];"}]},{"title":"概述","link":"overview","nodes":[{"h2":"","h3":"","h4":"","name":"","content":"Dcat Page是一个为PHPer打造的简单易用的静态站点构建工具，可以把markdown文档编译成漂亮的静态HTML页面。"},{"h2":"","h3":"基础","h4":"","name":"基础-h3","content":"Dcat Page使用Laravel框架的Blade模板引擎构建静态站点，代码非常简洁易懂。  并且使用了Laravel官方网站开源项目作为基础模板，开发者可以参考laravel.com进行二次开发。"},{"h2":"","h3":"特性","h4":"","name":"特性-h3","content":" 简单易用，仅需掌握3个命令即可轻松上手 支持开发环境实时预览 支持本地实时搜索文档内容 支持二次开发，自定义样式 "}]},{"title":"页面","link":"pages","nodes":[{"h2":"","h3":"","h4":"","name":"","content":"Dcat Page的每个单独的页面都放在resource/dcat-page/应用名称/views/pages目录下，该目录下的每个模板文件最终都会被编译成一个单独HTML文件。"},{"h2":"","h3":"默认页面","h4":"","name":"默认页面-h3","content":"Dcat Page有两个默认页面：resource/dcat-page/应用名称/views/pages/index.blade.php和resource/dcat-page/应用名称/views/pages/docs.blade.php。   index.blade.php是默认入口文件 docs.blade.php是文档入口文件 "},{"h2":"","h3":"新增页面","h4":"","name":"新增页面-h3","content":"Dcat Page允许开发者创建多个页面，只要在resource/dcat-page/应用名称/views/pages目录下增加你的blade模板文件就行，如果页面比较多，也可以创建多个子目录。   页面文件命名请使用小写字母+\"-\"风格命名（如：test-page.blade.php），请不要使用中文或大写字母。 "},{"h2":"","h3":"预览页面","h4":"","name":"预览页面-h3","content":"开发者在开发过程中可以实时预览自己编写的页面，页面效果和编译之后的完全一致。 假设你创建了一个页面test.blade.php，那么打开http://域名/dcat-page/应用名称/test即可访问。  如果创建的页面文件在子目录下ext/test.blade.php，那么访问时带上子目录的名称即可http://域名/dcat-page/应用名称/ext/test。"},{"h2":"","h3":"页面URL","h4":"","name":"页面URL-h3","content":"使用DcatPage\\url函数可以生成跳转到指定页面的链接。  假设你创建了一个页面test.blade.php，如果需要页面中添加一个此页面的入口，那么应该使用DcatPage\\url函数：   注意这里请不要直接使用/test，因为当把页面编译成Html时路径会发生变化。   <li><a href=\"{!! \\DcatPage\\url('/test') !!}\">Test</a></li>"},{"h2":"","h3":"引入模板文件","h4":"","name":"引入模板文件-h3","content":"使用DcatPage\\view_name可以获得模板文件名称，如：  @extends(DcatPage\\view_name('app')) @include(DcatPage\\view_name('partials/main-nav'))"},{"h2":"","h3":"引入静态资源","h4":"","name":"引入静态资源-h3","content":"resource/dcat-page/应用名称/public目录下的文件可以被直接访问到，Dcat\\asset函数可以生成静态资源访问路径。  假如你需要在模板中引入一个图片hello.jpg，那么首先把这个图片放在public/img目录下，然后在模板文件中使用：  <img src=\"{{ Dcat\\asset('img/hello.jpg') }}\" /> "},{"h2":"","h3":"设置菜单","h4":"","name":"设置菜单-h3","content":"菜单模板文件是resource/dcat-page/应用名称/views/partials/main-nav.blade.php，可以在这个文件添加你的自定义菜单  <li><a href=\"{!! \\DcatPage\\url('/docs') !!}\">Documentation</a></li> <!-- 添加自定义菜单 --> <li><a href=\"{!! \\DcatPage\\url('/test') !!}\">Test</a></li> <!-- 添加下拉菜单 --> <li class=\"dropdown\"> <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">Dropdown <span class=\"caret\"></span></a> <ul class=\"dropdown-menu\" role=\"menu\"> <li><a href=\"{!! \\DcatPage\\url('/test1') !!}\">Text 1</a></li> <li><a >Text 2</a></li> <li class=\"divider\"></li> <li><a >Text 3</a></li> </ul> </li>"},{"h2":"","h3":"设置页面SEO信息","h4":"","name":"设置页面SEO信息-h3","content":"通过resource/dcat-page/应用名称/config.php可以修改页面的SEO信息：  return [ ... 'website' => [ // 设置seo信息 'title' => 'Dcat Page', 'keywords' => '', 'description' => '', ], ... ];  如果要在给每个页面设置不同的TITLE，则在页面模板文件中设置resource/dcat-page/应用名称/views/pages/模板名称.blade.php:  @extends(\\DcatPage\\view_name('app'), ['title' => '在这里设置你的title'])"}]},{"title":"常见问题","link":"qa","nodes":[]},{"title":"主题","link":"theme","nodes":[{"h2":"","h3":"","h4":"","name":"","content":"敬请期待。"}]}]